// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace checkers_api.tests.Features.Game
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Game")]
    public partial class GameFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "Game.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Game", "Game", "    To ensure that my game logic is correct", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating default board board")]
        public void GeneratingDefaultBoardBoard()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating default board board", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
    testRunner.When("I start a game with players O and X", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 6
    testRunner.Then("the board should look like this", @" O |   | O |   | O |   | O |   |
   | O |   | O |   | O |   | O |
 O |   | O |   | O |   | O |   |
   |   |   |   |   |   |   |   |
   |   |   |   |   |   |   |   |
   | X |   | X |   | X |   | X |
 X |   | X |   | X |   | X |   |
   | X |   | X |   | X |   | X", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating a game with a starter board")]
        public void GeneratingAGameWithAStarterBoard()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating a game with a starter board", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 19
  testRunner.Given("the following board with players O and X and player X is moving", @"  O |   | O |   | O |   | O |   |
    | O |   | O |   | O |   | O |
  O |   | O |   | O |   |   |   |
    |   |   |   |   | O |   |   |
    |   |   |   |   |   |   |   |
    | X |   | X |   | X |   | X |
  X |   | X |   | X |   | X |   |
    | X |   | X |   | X |   | X", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 30
  testRunner.Then("the board should look like this", @"  O |   | O |   | O |   | O |   |
    | O |   | O |   | O |   | O |
  O |   | O |   | O |   |   |   |
    |   |   |   |   | O |   |   |
    |   |   |   |   |   |   |   |
    | X |   | X |   | X |   | X |
  X |   | X |   | X |   | X |   |
    | X |   | X |   | X |   | X", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player X makes a valid move")]
        public void PlayerXMakesAValidMove()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player X makes a valid move", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 43
  testRunner.Given("the following board with players O and X and player X is moving", @"  O |   | O |   | O |   | O |   |
    | O |   | O |   | O |   | O |
  O |   | O |   | O |   | O |   |
    |   |   |   |   |   |   |   |
    |   |   |   |   |   |   |   |
    | X |   | X |   | X |   | X |
  X |   | X |   | X |   | X |   |
    | X |   | X |   | X |   | X", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 54
  testRunner.When("player X makes a move from 5,1 to 4,2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
  testRunner.Then("the board should look like this", @"  O |   | O |   | O |   | O |   |
    | O |   | O |   | O |   | O |
  O |   | O |   | O |   | O |   |
    |   |   |   |   |   |   |   |
    |   | X |   |   |   |   |   |
    |   |   | X |   | X |   | X |
  X |   | X |   | X |   | X |   |
    | X |   | X |   | X |   | X", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 66
  testRunner.And("player O should now be moving", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player O makes a valid move")]
        public void PlayerOMakesAValidMove()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player O makes a valid move", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 68
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 69
  testRunner.Given("the following board with players O and X and player O is moving", @"  O |   | O |   | O |   | O |   |
    | O |   | O |   | O |   | O |
  O |   | O |   | O |   | O |   |
    |   |   |   |   |   |   |   |
    |   |   |   |   |   |   |   |
    | X |   | X |   | X |   | X |
  X |   | X |   | X |   | X |   |
    | X |   | X |   | X |   | X", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 80
  testRunner.When("player O makes a move from \'2,6 > 3,5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 81
  testRunner.Then("the board should look like this", @"  O |   | O |   | O |   | O |   |
    | O |   | O |   | O |   | O |
  O |   | O |   | O |   |   |   |
    |   |   |   |   | O |   |   |
    |   |   |   |   |   |   |   |
    | X |   | X |   | X |   | X |
  X |   | X |   | X |   | X |   |
    | X |   | X |   | X |   | X", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 92
  testRunner.And("player X should now be moving", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validating regular moves (excluding king moves and capturing)")]
        [NUnit.Framework.TestCaseAttribute("X", "X", "-1", "8", "5", "0", "Source location (-1,8) is out of bounds", null)]
        [NUnit.Framework.TestCaseAttribute("X", "X", "5", "1", "1", "-1", "Destination location (1,-1) is out of bounds", null)]
        [NUnit.Framework.TestCaseAttribute("X", "X", "8", "8", "5", "0", "Source location (8,8) is out of bounds", null)]
        [NUnit.Framework.TestCaseAttribute("X", "X", "5", "1", "8", "8", "Destination location (8,8) is out of bounds", null)]
        [NUnit.Framework.TestCaseAttribute("X", "X", "0", "0", "1", "1", "Source location (0,0) does not contain a piece", null)]
        [NUnit.Framework.TestCaseAttribute("X", "X", "2", "0", "3", "1", "Player X does not own the piece at source location (2,0)", null)]
        [NUnit.Framework.TestCaseAttribute("X", "X", "6", "0", "5", "1", "Destination location (5,1) is not empty", null)]
        [NUnit.Framework.TestCaseAttribute("X", "X", "5", "1", "6", "2", "Regular pieces cannot move backwards", null)]
        [NUnit.Framework.TestCaseAttribute("O", "O", "2", "0", "1", "1", "Regular pieces cannot move backwards", null)]
        [NUnit.Framework.TestCaseAttribute("X", "X", "5", "1", "5", "2", "Pieces can only move diagonally", null)]
        [NUnit.Framework.TestCaseAttribute("X", "X", "5", "1", "4", "1", "Pieces can only move diagonally", null)]
        [NUnit.Framework.TestCaseAttribute("X", "X", "5", "1", "4", "4", "Pieces can only move diagonally", null)]
        [NUnit.Framework.TestCaseAttribute("X", "X", "5", "1", "3", "3", "Pieces can only move one square when not capturing", null)]
        [NUnit.Framework.TestCaseAttribute("X", "X", "6", "4", "3", "7", "Pieces can only move one square when not capturing", null)]
        [NUnit.Framework.TestCaseAttribute("O", "X", "6", "4", "3", "7", "Player X tried to move outside its turn", null)]
        public void ValidatingRegularMovesExcludingKingMovesAndCapturing(string turn, string player, string sr, string sc, string dr, string dc, string error, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("turn", turn);
            argumentsOfScenario.Add("player", player);
            argumentsOfScenario.Add("sr", sr);
            argumentsOfScenario.Add("sc", sc);
            argumentsOfScenario.Add("dr", dr);
            argumentsOfScenario.Add("dc", dc);
            argumentsOfScenario.Add("error", error);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validating regular moves (excluding king moves and capturing)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 94
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 95
  testRunner.Given(string.Format("the following board with players O and X and player {0} is moving", turn), @"    |   |   |   |   |   |   |   |
    |   |   |   |   |   |   |   |
  O |   |   |   |   |   |   |   |
    |   |   |   |   |   |   |   |
    |   |   |   |   |   |   |   |
    | X |   |   |   | O |   |   |
  X |   |   |   | X |   |   |   |
    |   |   |   |   |   |   |  ", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 106
  testRunner.When(string.Format("player {0} makes a move from {1},{2} to {3},{4}", player, sr, sc, dr, dc), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 107
  testRunner.Then(string.Format("the move should fail with error \'{0}\'", error), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Crowning regular piece from player X")]
        public void CrowningRegularPieceFromPlayerX()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Crowning regular piece from player X", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 127
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 128
  testRunner.Given("the following board with players O and X and player X is moving", @"    |   |   |   |   |   |   |   |
    | X |   |   |   |   |   |   |
  O |   |   |   |   |   |   |   |
    |   |   |   |   |   |   |   |
    |   |   |   |   |   |   |   |
    |   |   |   |   |   |   |   |
    |   |   |   |   |   |   |   |
    |   |   |   |   |   |   |  ", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 139
  testRunner.When("player X makes a move from 1,1 to 0,0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 140
  testRunner.Then("the board should look like this", @"  X$ |   |   |   |   |   |   |   |
     |   |   |   |   |   |   |   |
   O |   |   |   |   |   |   |   |
     |   |   |   |   |   |   |   |
     |   |   |   |   |   |   |   |
     |   |   |   |   |   |   |   |
     |   |   |   |   |   |   |   |
     |   |   |   |   |   |   |  ", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 151
  testRunner.And("the piece at 0,0 should be a king piece", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Crowning regular piece from player O")]
        public void CrowningRegularPieceFromPlayerO()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Crowning regular piece from player O", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 153
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 154
  testRunner.Given("the following board with players O and X and player O is moving", @"    |   |   |   |   |   |   |   |
    | X |   |   |   |   |   |   |
    |   |   |   |   |   |   |   |
    |   |   |   |   |   |   |   |
    |   |   |   |   |   |   |   |
    |   |   |   |   |   |   |   |
    |   |   |   |   |   | O |   |
    |   |   |   |   |   |   |  ", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 165
  testRunner.When("player O makes a move from 6,6 to 7,7", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 166
  testRunner.Then("the board should look like this", @"    |   |   |   |   |   |   |   |
    | X |   |   |   |   |   |   |
    |   |   |   |   |   |   |   |
    |   |   |   |   |   |   |   |
    |   |   |   |   |   |   |   |
    |   |   |   |   |   |   |   |
    |   |   |   |   |   |   |   |
    |   |   |   |   |   |   | O$", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 177
  testRunner.And("the piece at 7,7 should be a king piece", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating a board with king piece already in it")]
        public void GeneratingABoardWithKingPieceAlreadyInIt()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating a board with king piece already in it", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 179
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 180
  testRunner.Given("the following board with players O and X and player O is moving", @" O$ |   |   |   |   |   |   |   |
    |   |   |   |   |   |   |   |
    |   |   |   |   |   |   |   |
    |   |   |   |   |   |   |   |
    |   |   |   |   |   |   |   |
    |   |   |   |   |   |   |   |
    |   |   |   |   |   |   |   |
    |   |   |   |   |   |   |  ", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 191
  testRunner.Then("the board should look like this", @" O$ |   |   |   |   |   |   |   |
    |   |   |   |   |   |   |   |
    |   |   |   |   |   |   |   |
    |   |   |   |   |   |   |   |
    |   |   |   |   |   |   |   |
    |   |   |   |   |   |   |   |
    |   |   |   |   |   |   |   |
    |   |   |   |   |   |   |  ", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("King piece from player X can move backwards")]
        public void KingPieceFromPlayerXCanMoveBackwards()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("King piece from player X can move backwards", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 203
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 204
  testRunner.Given("the following board with players O and X and player X is moving", @"  |    |   |   |   |   |   |   |
  | X$ |   |   |   |   |   |   |
  |    |   |   |   |   |   |   |
  |    |   |   |   |   |   |   |
  |    |   |   |   |   |   |   |
  |    |   |   |   |   |   |   |
  |    |   |   |   |   | O |   |
  |    |   |   |   |   |   |  ", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 215
  testRunner.When("player X makes a move from 1,1 to 2,2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 216
  testRunner.Then("the board should look like this", @"  |   |    |   |   |   |   |   |
  |   |    |   |   |   |   |   |
  |   | X$ |   |   |   |   |   |
  |   |    |   |   |   |   |   |
  |   |    |   |   |   |   |   |
  |   |    |   |   |   |   |   |
  |   |    |   |   |   | O |   |
  |   |    |   |   |   |   |  ", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("King piece from player O can move backwards")]
        public void KingPieceFromPlayerOCanMoveBackwards()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("King piece from player O can move backwards", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 228
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 229
  testRunner.Given("the following board with players O and X and player O is moving", @"  |   |   |   |   |   |    |   |
  | X |   |   |   |   |    |   |
  |   |   |   |   |   |    |   |
  |   |   |   |   |   |    |   |
  |   |   |   |   |   |    |   |
  |   |   |   |   |   |    |   |
  |   |   |   |   |   | O$ |   |
  |   |   |   |   |   |    |  ", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 240
  testRunner.When("player O makes a move from 6,6 to 5,5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 241
  testRunner.Then("the board should look like this", @"  |   |   |   |   |    |   |   |
  | X |   |   |   |    |   |   |
  |   |   |   |   |    |   |   |
  |   |   |   |   |    |   |   |
  |   |   |   |   |    |   |   |
  |   |   |   |   | O$ |   |   |
  |   |   |   |   |    |   |   |
  |   |   |   |   |    |   |  ", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player X captures a piece from player O")]
        public void PlayerXCapturesAPieceFromPlayerO()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player X captures a piece from player O", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 253
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 254
  testRunner.Given("the following board with players O and X and player X is moving", @"  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   | O |   |   |   |   |   |
  |   |   | X |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |  ", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 265
  testRunner.When("player X makes a move from 3,3 to 1,1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 266
  testRunner.Then("the board should look like this", @"  |   |   |   |   |   |   |   |
  | X |   |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |  ", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player O captures a piece from player X")]
        public void PlayerOCapturesAPieceFromPlayerX()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player O captures a piece from player X", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 278
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 279
  testRunner.Given("the following board with players O and X and player O is moving", @"  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   | O |   |   |   |   |   |
  |   |   | X |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |  ", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 290
  testRunner.When("player O makes a move from 2,2 to 4,4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 291
  testRunner.Then("the board should look like this", @"  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   | O |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |  ", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player X captures a piece from player O using a king piece")]
        public void PlayerXCapturesAPieceFromPlayerOUsingAKingPiece()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player X captures a piece from player O using a king piece", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 303
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 304
  testRunner.Given("the following board with players O and X and player X is moving", @"  |    |   |   |   |   |   |   |
  | X$ |   |   |   |   |   |   |
  |    | O |   |   |   |   |   |
  |    |   |   |   |   |   |   |
  |    |   |   |   |   |   |   |
  |    |   |   |   |   |   |   |
  |    |   |   |   |   |   |   |
  |    |   |   |   |   |   |  ", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 315
  testRunner.When("player X makes a move from 1,1 to 3,3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 316
  testRunner.Then("the board should look like this", @"  |   |   |    |   |   |   |   |
  |   |   |    |   |   |   |   |
  |   |   |    |   |   |   |   |
  |   |   | X$ |   |   |   |   |
  |   |   |    |   |   |   |   |
  |   |   |    |   |   |   |   |
  |   |   |    |   |   |   |   |
  |   |   |    |   |   |   |  ", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player O captures a piece from player X using a king piece")]
        public void PlayerOCapturesAPieceFromPlayerXUsingAKingPiece()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player O captures a piece from player X using a king piece", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 328
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 329
  testRunner.Given("the following board with players O and X and player O is moving", @"  |   |    |   |   |   |   |   |
  | X |    |   |   |   |   |   |
  |   | O$ |   |   |   |   |   |
  |   |    |   |   |   |   |   |
  |   |    |   |   |   |   |   |
  |   |    |   |   |   |   |   |
  |   |    |   |   |   |   |   |
  |   |    |   |   |   |   |  ", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 340
  testRunner.When("player O makes a move from 2,2 to 0,0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 341
  testRunner.Then("the board should look like this", @"O$ |   |   |   |   |   |   |   |
   |   |   |   |   |   |   |   |
   |   |   |   |   |   |   |   |
   |   |   |   |   |   |   |   |
   |   |   |   |   |   |   |   |
   |   |   |   |   |   |   |   |
   |   |   |   |   |   |   |   |
   |   |   |   |   |   |   |  ", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player X tries a straigt double jump when capturing")]
        public void PlayerXTriesAStraigtDoubleJumpWhenCapturing()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player X tries a straigt double jump when capturing", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 353
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 354
  testRunner.Given("the following board with players O and X and player X is moving", @"  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   | O |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   | O |   |   |   |
  |   |   |   |   | X |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |  ", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 365
  testRunner.When("player X makes a move from \'5,5 > 3,3 > 1,1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 366
  testRunner.Then("the board should look like this", @"  |   |   |   |   |   |   |   |
  | X |   |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |  ", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player O tries a straight triple jump when capturing")]
        public void PlayerOTriesAStraightTripleJumpWhenCapturing()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player O tries a straight triple jump when capturing", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 378
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 379
  testRunner.Given("the following board with players O and X and player O is moving", @"O |   |   |   |   |   |   |   |
  | X |   |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   | X |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   |   | X |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |  ", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 390
  testRunner.When("player O makes a move from \'0,0 > 2,2 > 4,4 > 6,6\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 391
  testRunner.Then("the board should look like this", "|   |   |   |   |   |   |   |\r\n|   |   |   |   |   |   |   |\r\n|   |   |   |   |  " +
                        " |   |   |\r\n|   |   |   |   |   |   |   |\r\n|   |   |   |   |   |   |   |\r\n|   | " +
                        "  |   |   |   |   |   |\r\n|   |   |   |   |   | O |   |\r\n|   |   |   |   |   |   " +
                        "|  ", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player O tries a twisty triple jump when capturing")]
        public void PlayerOTriesATwistyTripleJumpWhenCapturing()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player O tries a twisty triple jump when capturing", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 403
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 404
  testRunner.Given("the following board with players O and X and player O is moving", @"O |   |   |   |   |   |   |   |
  | X |   |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  | X |   |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  | X |   |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |  ", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 415
  testRunner.When("player O makes a move from \'0,0 > 2,2 > 4,0 > 6,2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 416
  testRunner.Then("the board should look like this", "|   |   |   |   |   |   |   |\r\n|   |   |   |   |   |   |   |\r\n|   |   |   |   |  " +
                        " |   |   |\r\n|   |   |   |   |   |   |   |\r\n|   |   |   |   |   |   |   |\r\n|   | " +
                        "  |   |   |   |   |   |\r\n|   | O |   |   |   |   |   |\r\n|   |   |   |   |   |   " +
                        "|  ", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player O tries an invalid double jump")]
        public void PlayerOTriesAnInvalidDoubleJump()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player O tries an invalid double jump", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 428
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 429
  testRunner.Given("the following board with players O and X and player O is moving", @"O |   |   |   |   |   |   |   |
  | X |   |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   | X |   |   |   |   |
  |   |   |   | X |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |  ", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 440
  testRunner.When("player O makes a move from \'0,0 > 2,2 > 5,5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 441
  testRunner.Then("the move should fail with error \'Pieces can only move one square when not capturi" +
                        "ng\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player O tries to double jump backwards with regular piece")]
        public void PlayerOTriesToDoubleJumpBackwardsWithRegularPiece()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player O tries to double jump backwards with regular piece", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 443
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 444
  testRunner.Given("the following board with players O and X and player O is moving", @"O |   |   |   |   |   |   |   |
  | X |   | X |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |  ", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 455
  testRunner.When("player O makes a move from \'0,0 > 2,2 > 0,4\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 456
  testRunner.Then("the move should fail with error \'Regular pieces cannot move backwards\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player O tries to tripe jump backwards while crowning regular piece")]
        public void PlayerOTriesToTripeJumpBackwardsWhileCrowningRegularPiece()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player O tries to tripe jump backwards while crowning regular piece", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 458
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 459
  testRunner.Given("the following board with players O and X and player O is moving", @"  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   |   |   |   |   |
  |   |   |   |   |   | X |   |
  | O |   |   |   |   |   |   |
  |   | X |   | X |   |   |   |
  |   |   |   |   |   |   |  ", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 470
  testRunner.When("player O makes a move from \'5,1 > 7,3 > 5,5 > 3,7\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 471
  testRunner.Then("the board should look like this", "|   |   |   |   |   |   |    |\r\n|   |   |   |   |   |   |    |\r\n|   |   |   |   |" +
                        "   |   |    |\r\n|   |   |   |   |   |   | O$ |\r\n|   |   |   |   |   |   |    |\r\n|" +
                        "   |   |   |   |   |   |    |\r\n|   |   |   |   |   |   |    |\r\n|   |   |   |   |" +
                        "   |   |   ", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
