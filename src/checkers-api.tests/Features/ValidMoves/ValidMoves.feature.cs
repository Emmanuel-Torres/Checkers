// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace checkers_api.tests.Features.ValidMoves
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Valid Moves")]
    public partial class ValidMovesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "ValidMoves.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/ValidMoves", "Valid Moves", "    To ensure that the valid moves are returned in each Scenario", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player X requests moves for a regular piece")]
        public void PlayerXRequestsMovesForARegularPiece()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player X requests moves for a regular piece", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
  testRunner.Given("the following board with players O and X and player X is moving", @"  O |   | O |   | O |   | O |   .
    | O |   | O |   | O |   | O .
  O |   | O |   | O |   |   |   .
    |   |   |   |   | O |   |   .
    |   |   |   |   |   |   |   .
    | X |   | X |   | X |   | X .
  X |   | X |   | X |   | X |   .
    | X |   | X |   | X |   | X", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 16
  testRunner.When("player X requests the valid moves for location \'5,1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Destination",
                            "MoveSequence"});
                table8.AddRow(new string[] {
                            "4,0",
                            "5,1 > 4,0"});
                table8.AddRow(new string[] {
                            "4,2",
                            "5,1 > 4,2"});
#line 17
  testRunner.Then("the following moves should be available", ((string)(null)), table8, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player O requests moves for a regular piece")]
        public void PlayerORequestsMovesForARegularPiece()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player O requests moves for a regular piece", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 23
  testRunner.Given("the following board with players O and X and player X is moving", @"  O |   | O |   | O |   | O |   .
    | O |   | O |   | O |   | O .
  O |   | O |   | O |   |   |   .
    |   |   |   |   | O |   |   .
    |   |   |   |   |   |   |   .
    | X |   | X |   | X |   | X .
  X |   | X |   | X |   | X |   .
    | X |   | X |   | X |   | X", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 34
  testRunner.When("player O requests the valid moves for location \'2,2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Destination",
                            "MoveSequence"});
                table9.AddRow(new string[] {
                            "3,1",
                            "2,2 > 3,1"});
                table9.AddRow(new string[] {
                            "3,3",
                            "2,2 > 3,3"});
#line 35
  testRunner.Then("the following moves should be available", ((string)(null)), table9, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player X requests the valid moves for a square owned by player O")]
        public void PlayerXRequestsTheValidMovesForASquareOwnedByPlayerO()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player X requests the valid moves for a square owned by player O", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 40
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 41
  testRunner.Given("the following board with players O and X and player X is moving", @"  O |   | O |   | O |   | O |   .
    | O |   | O |   | O |   | O .
  O |   | O |   | O |   |   |   .
    |   |   |   |   | O |   |   .
    |   |   |   |   |   |   |   .
    | X |   | X |   | X |   | X .
  X |   | X |   | X |   | X |   .
    | X |   | X |   | X |   | X", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 52
  testRunner.When("player X requests the valid moves for location \'2,2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 53
  testRunner.Then("no valid moves should be available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player X requests the valid moves for an empty square")]
        public void PlayerXRequestsTheValidMovesForAnEmptySquare()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player X requests the valid moves for an empty square", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 55
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 56
  testRunner.Given("the following board with players O and X and player X is moving", @"  O |   | O |   | O |   | O |   .
    | O |   | O |   | O |   | O .
  O |   | O |   | O |   |   |   .
    |   |   |   |   | O |   |   .
    |   |   |   |   |   |   |   .
    | X |   | X |   | X |   | X .
  X |   | X |   | X |   | X |   .
    | X |   | X |   | X |   | X", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 67
  testRunner.When("player X requests the valid moves for location \'3,3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 68
  testRunner.Then("no valid moves should be available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player X requests the valid moves for a King piece")]
        public void PlayerXRequestsTheValidMovesForAKingPiece()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player X requests the valid moves for a King piece", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 70
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 71
  testRunner.Given("the following board with players O and X and player X is moving", @"  O |   | O |   | O  |   | O |   .
    | O |   | O |    | O |   | O .
  O |   | O |   | O  |   | O |   .
    |   |   |   |    |   |   |   .
    |   |   |   | X$ |   |   |   .
    | X |   |   |    | X |   | X .
  X |   | X |   | X  |   | X |   .
    | X |   | X |    | X |   | X", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 82
  testRunner.When("player X requests the valid moves for location \'4,4\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Destination",
                            "MoveSequence"});
                table10.AddRow(new string[] {
                            "5,3",
                            "4,4 > 5,3"});
                table10.AddRow(new string[] {
                            "3,3",
                            "4,4 > 3,3"});
                table10.AddRow(new string[] {
                            "3,5",
                            "4,4 > 3,5"});
#line 83
  testRunner.Then("the following moves should be available", ((string)(null)), table10, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player O requests the valid moves for a King piece")]
        public void PlayerORequestsTheValidMovesForAKingPiece()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player O requests the valid moves for a King piece", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 89
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 90
  testRunner.Given("the following board with players O and X and player X is moving", @"  O |   | O |   | O  |   | O |   .
    | O |   | O |    | O |   | O .
  O |   | O |   | O  |   | O |   .
    |   |   |   |    |   |   |   .
    |   |   |   | O$ |   |   |   .
    | X |   |   |    | X |   | X .
  X |   | X |   | X  |   | X |   .
    | X |   | X |    | X |   | X", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 101
  testRunner.When("player O requests the valid moves for location \'4,4\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Destination",
                            "MoveSequence"});
                table11.AddRow(new string[] {
                            "5,3",
                            "4,4 > 5,3"});
                table11.AddRow(new string[] {
                            "3,3",
                            "4,4 > 3,3"});
                table11.AddRow(new string[] {
                            "3,5",
                            "4,4 > 3,5"});
#line 102
  testRunner.Then("the following moves should be available", ((string)(null)), table11, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player X requests the valid moves for a piece with 1 attack available")]
        public void PlayerXRequestsTheValidMovesForAPieceWith1AttackAvailable()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player X requests the valid moves for a piece with 1 attack available", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 108
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 109
  testRunner.Given("the following board with players O and X and player O is moving", @"    |   |   |   |   |   |   |   .
    |   |   |   |   |   |   |   .
    |   |   |   |   |   |   |   .
    |   |   |   |   |   |   |   .
    |   |   |   |   |   |   |   .
    |   |   |   |   |   |   |   .
    |   |   |   |   |   | O |   .
    |   |   |   |   |   |   | X", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 120
  testRunner.When("player X requests the valid moves for location \'7,7\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Destination",
                            "MoveSequence"});
                table12.AddRow(new string[] {
                            "5,5",
                            "7,7 > 5,7"});
#line 121
  testRunner.Then("the following moves should be available", ((string)(null)), table12, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
